{% extends 'base.html.twig' %}
{% import "app_structure/macro/menu_item.html.twig" as menuItemMacro %}
{% block title %}Structure - Backoffice - {{ application.name }}{% endblock %}

{% block body %}
    <div class="w-100">
        <div class="toggle-buttons is-hidden-desktop">
            <button class="button is-primary" id="show-settings">Show Settings</button>
            <button class="button is-link" id="show-preview">Show Preview</button>
        </div>
        <div class="main-container">

            <div class="preview-container">
                <p>Preview content here...</p>
            </div>
            <div class="settings-container active">
                <div class="page-settings-form-container" id="page-settings"></div>
                <div class="structure-container" id="app-structure">
                    <div class="w-100">
                        <h2 class="title is-4">Menu de navigation</h2>
                        <div class="menu custom-menu">
                            {{ menuItemMacro.renderMenu(mainMenu) }}
                        </div>
                    </div>
                    <div class="w-100 mt-5">
                        <h2 class="title is-4">Autres pages & menus</h2>
                        <div class="menu custom-menu">
                            {{ menuItemMacro.renderMenu(unassignedPagesMenu) }}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <div id="page_types_panel_modal" class="modal">
        <div class="modal-background"></div>
        <div class="modal-card">
            <header class="modal-card-head">
                <p class="modal-card-title">Modal title</p>
                <button class="delete" aria-label="close"></button>
            </header>
            <section class="modal-card-body" id="modal-content">
                <!-- Content will be injected here -->
            </section>
            <footer class="modal-card-foot">
                <button class="button is-success">Save changes</button>
                <button class="button">Cancel</button>
            </footer>
        </div>

    </div>
{% endblock %}

    {% block javascripts %}
        {{ parent() }}


        <script>
            function updateMenuOrder(menuItemUUID, parentMenuUUID, positionIndex) {
                console.log('Updating menu order:', menuItemUUID, parentMenuUUID, positionIndex);
                fetch(window.origin + '/manage/app/menu/update', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest', // Important for Symfony to recognize AJAX
                    },
                    body: JSON.stringify({
                        menuItem: menuItemUUID,
                        parentMenu: parentMenuUUID,
                        positionIndex: positionIndex
                    })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            console.log('Menu order updated successfully.');
                        } else {
                            console.error('Error updating menu order:', data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
            }

            const initForm = (form,callback=undefined,cancelCallback=undefined) => {
                if (cancelCallback){
                    const cancelButton = form.querySelector('button[data-action="cancel_form"]');
                    if (cancelButton){
                        cancelButton.addEventListener('click',cancelCallback);
                    }
                }
                form.addEventListener('submit', (e) => {
                    e.preventDefault();
                    const formData = new FormData(form);
                    const url = form.getAttribute('action');
                    fetch(url, {
                        method: 'POST',
                        body: formData
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                if (callback) {
                                    callback(data);
                                }
                            } else {
                                // replace form by html from data.content
                                if (data.content ){
                                    const parent = form.parentElement;
                                    // replace form by html from data.content
                                    parent.innerHTML = data.content;
                                    initForm(parent.querySelector('form'),callback,cancelCallback);

                                }
                            }

                        })
                        .catch(error => {

                        });
                });
            };

            // when click on a .menu-item, get closest .menu-item and load ajax content from data-edit-settings-url and put response.content in #page-settings
            const initAppStructure = () => {
                document.addEventListener('DOMContentLoaded', function () {
                    document.querySelectorAll('.menu-item .dropdown-item[data-action="open_page_settings"]').forEach(function (editSettingsLink) {
                        editSettingsLink.addEventListener('click', function (e) {
                            e.preventDefault();
                            const menuItem = editSettingsLink.closest('.menu-item');
                            const editSettingsUrl = menuItem.getAttribute('data-edit-settings-url');
                            const pageSettingsContainer = document.getElementById('page-settings');

                            fetch(editSettingsUrl)
                                .then(response => response.json())
                                .then(data => {
                                    if (data.content) {
                                        // show #page-settings
                                        pageSettingsContainer.classList.remove('is-hidden');
                                        pageSettingsContainer.innerHTML = data.content;
                                        initForm(pageSettingsContainer.querySelector('form'),(data)=>{
                                            if (data.success){
                                                document.getElementById('app-structure').innerHTML = data.content;
                                                initAppStructure();
                                                // hide #page-settings
                                                pageSettingsContainer.classList.add('is-hidden');
                                                document.getElementById('app-structure').classList.remove('is-hidden');
                                            }
                                        },()=>{
                                            // make settings container empty
                                            pageSettingsContainer.innerHTML = '';
                                            // hide #page-settings
                                            pageSettingsContainer.classList.add('is-hidden');
                                            document.getElementById('app-structure').classList.remove('is-hidden');
                                        });
                                        // hide #app-structure
                                        document.getElementById('app-structure').classList.add('is-hidden');
                                    } else {
                                        console.error('Invalid response format:', data);
                                    }
                                })
                                .catch(error => console.error('Error fetching data:', error));
                        });
                    });
                });

                document.addEventListener("DOMContentLoaded", function () {
                    // Sélectionne toutes les icônes de bascule
                    const toggleIcons = document.querySelectorAll(".toggle-icon");

                    toggleIcons.forEach(icon => {
                        icon.addEventListener("click", function () {
                            // Trouve le contenu du menu associé
                            const menuItem = icon.closest(".menu-item");
                            const menuContent = menuItem.querySelector(".menu-content");

                            // Ouvre ou ferme le menu
                            if (menuContent.classList.contains("open")) {
                                menuContent.classList.remove("open");
                                icon.querySelector("i").classList.replace("ri-arrow-up-s-line", "ri-arrow-down-s-line");
                            } else {
                                menuContent.classList.add("open");
                                icon.querySelector("i").classList.replace("ri-arrow-down-s-line", "ri-arrow-up-s-line");
                            }
                        });
                    });
                });

                document.addEventListener('DOMContentLoaded', () => {
                    // Initialize sortable for menu items
                    const menuItemsContainer = document.querySelectorAll('.menu-content');

                    menuItemsContainer.forEach(container => {
                        // don't accept drag of elment with no-draggable class
                        new Sortable(container, {
                            group: 'nested',
                            animation: 150,
                            ghostClass: 'sortable-ghost',
                            filter: '.no-draggable',
                            onMove: function (evt) {
                                const draggedItem = evt.dragged;
                                const relatedItem = evt.related;

                                // Check if the dragged item is being placed after a non-draggable item
                                const isAfterNoDraggable = relatedItem.classList.contains('no-draggable') && evt.willInsertAfter;

                                // Prevent the move if trying to drop after a non-draggable item
                                if (isAfterNoDraggable) {
                                    return false;
                                }

                                // Allow the move otherwise
                                return true;
                            },
                            onEnd: function (/**Event*/evt) {
                                const itemEl = evt.item;  // the dragged item

                                // Get necessary data attributes
                                const menuItemId = itemEl.getAttribute('data-menu-item-id');
                                const parentMenuId = itemEl.closest('.menu-content').closest('[data-menu-id]').getAttribute('data-menu-id');
                                const newPositionIndex = Array.from(container.children).indexOf(itemEl);

                                // Send AJAX request to update the backend
                                updateMenuOrder(menuItemId, parentMenuId, newPositionIndex);
                            },
                        });
                    });
                });

                document.addEventListener('DOMContentLoaded', function () {
                    // Function to show modal
                    function showModal(content) {
                        const modal = document.getElementById('page_types_panel_modal');
                        const modalContent = document.getElementById('page_types_panel_modal').querySelector('#modal-content');

                        modalContent.innerHTML = content;
                        modal.classList.add('is-active');

                        // Add event listener to close buttons
                        modal.querySelector('.delete').addEventListener('click', closeModal);
                        modal.querySelector('.modal-background').addEventListener('click', closeModal);
                    }

                    // Function to close modal
                    function closeModal() {
                        const modal = document.getElementById('page_types_panel_modal');
                        modal.classList.remove('is-active');
                    }

                    // Add click event listeners to all elements with data-action="add-page"
                    const addPageElements = document.querySelectorAll('[data-action="add-page"]');
                    addPageElements.forEach(function (element) {
                        element.addEventListener('click', function () {
                            const url = element.getAttribute('data-action-url');

                            fetch(url)
                                .then(response => response.json())
                                .then(data => {
                                    if (data.content) {
                                        showModal(data.content);
                                        document.querySelectorAll('.card').forEach(function (card) {
                                            card.addEventListener('click', function () {
                                                var action = card.getAttribute('data-action');
                                                var actionUrl = card.getAttribute('data-action-url');
                                                var modal = document.querySelector('.modal');
                                                var modalContent = document.querySelector('.modal-content');
                                                modalContent.innerHTML = '';
                                                modalContent.innerHTML = '<div class="loader"></div>';
                                                modal.classList.add('is-active');
                                                fetch(actionUrl)
                                                    .then(response => response.text())
                                                    .then(data => {
                                                        modalContent.innerHTML = data;
                                                    });
                                            });
                                        });
                                    } else {
                                        console.error('Invalid response format:', data);
                                    }
                                })
                                .catch(error => console.error('Error fetching data:', error));
                        });
                    });
                });
            };

            initAppStructure();


        </script>
    {% endblock %}
